<task>Using the context gathered from the following sources, follow the directions given below:</task>

<file name="src/index.ts">
// src/index.ts
import { Command } from "commander";
import { gatherInformation } from "./gatherInformation";
import { loadConfig } from "./config";
import { copyToClipboard } from "./clipboard";
import { writeToFile } from "./fileWriter";
import { FilesAgent } from "./filesAgent";
import { UrlsAgent } from "./urlsAgent";
import { ReconAgent } from "./reconAgent";

const program = new Command();

program
  .description("Gather information for a specific command")
  .option("-p, --prompt <prompt>", "Prompt to append to the output")
  .option("--clipboard", "Copy the prompt to the clipboard")
  .option("-o, --output <file>", "Write the prompt to a file", (value, prev) => {
    if (value.startsWith("-")) {
      throw new Error("Invalid output file");
    }
    return value;
  })
  .option("--files <files>", "Comma-separated list of files or directories")
  .option("--urls <urls>", "Comma-separated list of URLs")
  .arguments("[command]")
  .action(async (command, options) => {
    console.log("command", command);
    console.log("options", options);
    const config = loadConfig();
    console.log("config", config);
    const { commands } = config;

    // Try to get the command config from the config file
    let commandConfig = commands?.[command];

    // If the command is not found, try to use the default command
    if (!commandConfig) {
      commandConfig = {
        prompt: options.prompt,
        gather: {},
      };
    }

    if (options.prompt) {
      commandConfig.prompt = options.prompt;
    }

    const filesAgent = new FilesAgent();

    if (options.files) {
      commandConfig.gather.files = filesAgent.parseOptions(options.files);
    }

    const urlsAgent = new UrlsAgent();
    if (options.urls) {
      commandConfig.gather.urls = urlsAgent.parseOptions(options.urls);
    }

    let agents: ReconAgent<any>[] = [
      filesAgent,
      urlsAgent,
      ...(config.agents || []),
    ];

    const prompt = await gatherInformation(agents, commandConfig);

    if (options.clipboard) {
      await copyToClipboard(prompt);
      console.log("Prompt copied to clipboard");
    } else if (options.output) {
      await writeToFile(options.output, prompt);
      console.log(`Prompt written to ${options.output}`);
    } else {
      //   console.log(prompt);
    }
  });

program.parse(process.argv);

</file>

<file name="src/clipboard.ts">
// src/clipboard.ts
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

async function isWsl(): Promise<boolean> {
  try {
    await execAsync('uname -a');
    return true;
  } catch (error) {
    return false;
  }
}

async function copyToClipboardMac(text: string): Promise<void> {
  await execAsync(`echo "${text}" | pbcopy`);
}

async function copyToClipboardWindows(text: string): Promise<void> {
  await execAsync(`echo | set /p="${text}" | clip`);
}

async function copyToClipboardLinux(text: string): Promise<void> {
  const wsl = await isWsl();
  if (wsl) {
    await execAsync(`echo "${text}" | clip.exe`);
  } else {
    await execAsync(`echo "${text}" | xclip -selection clipboard`);
  }
}

export async function copyToClipboard(text: string): Promise<void> {
  switch (process.platform) {
    case 'darwin':
      await copyToClipboardMac(text);
      break;
    case 'win32':
      await copyToClipboardWindows(text);
      break;
    case 'linux':
      await copyToClipboardLinux(text);
      break;
    default:
      throw new Error('Unsupported platform');
  }
}
</file>

<directions>
I'm using WSL and sometimes when I use the clipboard flag it doesn't do anything. At other times it does. Are there limitations of the method being used here?
</directions>